<script src="[(site_url)]assets/tpl/js/jquery-1.11.2.min.js"></script>
<script src="[(site_url)]assets/tpl/js/tinycarousel.min.js"></script>
<script src="[(site_url)]assets/tpl/js/flexslider.js"></script>
<script src="[(site_url)]assets/tpl/js/highslide.js"></script>
<script src="[(site_url)]assets/tpl/js/global.js"></script>
<script type="text/javascript">
hs.graphicsDir = '[(site_url)]assets/tpl/js/graphics/';     
hs.transitions = ['expand'];                 
hs.fadeInOut = true;                               
hs.numberPosition = 'caption';                
hs.dimmingOpacity = 0.75;                   
hs.align = 'center';                           
	
// добавляем блок навигации (стандартный)
hs.addSlideshow({
        interval: 5000,                       // интервал смен в милисеках
        repeat: false,                        // повторять/не повторять
        useControls: true,                    // использовать ли кнопки навигации?
        overlayOptions: {
                opacity: 0.6,                  // прозрачность панели навигации
                position: 'bottom center',     // позиция панели навигации
                hideOnMouseOut: false          // панель спрячется, если убрать курсор мыши со слайда         
    }
});
</script>
<script>
	$(window).load(function(){
	       $('.flexslider').flexslider({
	           animation: "slide",
	           slideshow: true,
	           slideshowSpeed: 3000,
	           directionNav: false,
	           controlNav: true,
	           start: function(slider){
	            $('body').removeClass('loading');
	           }
	      });
	});
	$(document).ready(function(){
		$('#carusel').tinycarousel({
    interval: true,
    intervaltime: 1000
});
	});
        </script>
<script type="text/javascript">
        $(function()
        {
            $('#openButton').on('click', function()
            {
                $('#slideForm').slideToggle();
            });
        });
        </script>
